{"ast":null,"code":"var _jsxFileName = \"/home/sameer/Documents/react-crypto-tracker/src/Pages/pricePage.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { Component, useState, useEffect, useRef } from \"react\";\nimport { Container, Header, Content, H1, Text, Form, Item, Input } from \"native-base\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst pricePage = () => {\n  _s();\n\n  const [name, setName] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [count, setCount] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [commission, setCommission] = useState(\"\"); // used to regulate when calculations are made\n\n  const [focusedInput, setFocus] = useState(null); // run an effect when price, count, or amount changes\n\n  useEffect(() => {\n    // if price and count exist and user isnt changing amount, calculate amount\n    if (price && count && focusedInput !== 'amount') {\n      setAmount(price * count);\n    } // if price and count exist and user isnt changing count, calculate count\n    else if (price && amount && focusedInput !== 'count') {\n      setCount(amount / price);\n    }\n  }, [price, count, amount]); // when amount changes, update commission and total\n\n  useEffect(() => {\n    if (isNaN(amount)) setCommission('');\n    if (amount) setCommission(amount * 0.002);\n  }, [amount]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(Item, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"coin name\",\n            onChangeText: setName,\n            keyboardType: \"decimal-pad\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"number of coins\",\n            onChangeText: text => setCount(parseFloat(text)),\n            keyboardType: \"decimal-pad\",\n            value: count.toString(),\n            onFocus: () => setFocus(\"count\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Amount Invested\",\n            onChangeText: text => setAmount(parseFloat(text)),\n            keyboardType: \"decimal-pad\",\n            value: amount.toString(),\n            onFocus: () => setFocus(\"amount\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Item, {\n          last: true,\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"coin price\",\n            onChangeText: text => setPrice(parseFloat(text)),\n            keyboardType: \"decimal-pad\",\n            value: price.toString(),\n            onFocus: () => setFocus(\"price\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Commission: \", commission]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        children: [\"Total Amount: \", commission + amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(pricePage, \"tYhfhgWmAuIa9FzB/5iBjVwKspY=\");\n\nexport default pricePage;","map":{"version":3,"sources":["/home/sameer/Documents/react-crypto-tracker/src/Pages/pricePage.js"],"names":["React","Component","useState","useEffect","useRef","Container","Header","Content","H1","Text","Form","Item","Input","pricePage","name","setName","amount","setAmount","count","setCount","price","setPrice","commission","setCommission","focusedInput","setFocus","isNaN","text","parseFloat","toString"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { Component, useState, useEffect, useRef } from \"react\";\nimport {\n  Container,\n  Header,\n  Content,\n  H1,\n  Text,\n  Form,\n  Item,\n  Input,\n} from \"native-base\";\n\nconst pricePage = () => {\n  const [name, setName] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [count, setCount] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [commission, setCommission] = useState(\"\");\n  // used to regulate when calculations are made\n  const [ focusedInput, setFocus ] = useState(null)\n\n  // run an effect when price, count, or amount changes\n  useEffect(()=>{\n    // if price and count exist and user isnt changing amount, calculate amount\n    if(price && count && focusedInput !== 'amount'){\n      setAmount( price * count );\n    }\n    // if price and count exist and user isnt changing count, calculate count\n    else if(price && amount && focusedInput !== 'count'){\n      setCount( amount / price )\n    }\n  },[price,count,amount])\n  // when amount changes, update commission and total\n  useEffect(()=>{\n    if(isNaN(amount))\n      setCommission('')\n    if(amount)\n      setCommission( amount * 0.002);\n  },[amount])\n  \n  return (\n    <Container>\n      <Header />\n      <Content>\n        <Form>\n          <Item>\n            <Input\n              placeholder=\"coin name\"\n              onChangeText={setName}\n              keyboardType=\"decimal-pad\"\n            />\n          </Item>\n          <Item>\n            <Input\n              placeholder=\"number of coins\"\n              onChangeText={text => setCount(parseFloat(text))}\n              keyboardType=\"decimal-pad\"\n              value={count.toString()}\n              onFocus={()=>setFocus(\"count\")}\n            />\n          </Item>\n          <Item>\n            <Input\n              placeholder=\"Amount Invested\"\n              onChangeText={text => setAmount(parseFloat(text))}\n              keyboardType=\"decimal-pad\"\n              value={amount.toString()}\n              onFocus={()=>setFocus(\"amount\")}\n            />\n          </Item>\n\n          <Item last>\n            <Input\n              placeholder=\"coin price\"\n              onChangeText={text=>setPrice(parseFloat(text))}\n              keyboardType=\"decimal-pad\"\n              value={price.toString()}\n              onFocus={()=>setFocus(\"price\")}\n\n            />\n          </Item>\n        </Form>\n        <Text>Commission: {commission}</Text>\n        <Text>Total Amount: {commission +amount}</Text>\n      </Content>\n    </Container>\n  );\n}\n\nexport default pricePage;"]},"metadata":{},"sourceType":"module"}